
import { GoogleGenAI, Modality } from "@google/genai";
import type { ImageFile } from '../types';

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const dataURLToImageFile = (dataURL: string): ImageFile => {
    const [header, base64] = dataURL.split(',');
    if (!header || !base64) {
        throw new Error("Invalid data URL format");
    }
    const mimeType = header.match(/:(.*?);/)?.[1] ?? 'image/png';
    return { base64, mimeType };
};

export const generateTryOnImage = async (personDataURL: string, outfitDataURL: string): Promise<string> => {
    const personImage = dataURLToImageFile(personDataURL);
    const outfitImage = dataURLToImageFile(outfitDataURL);

    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image-preview',
        contents: {
            parts: [
                {
                    inlineData: {
                        data: personImage.base64,
                        mimeType: personImage.mimeType,
                    },
                },
                {
                    inlineData: {
                        data: outfitImage.base64,
                        mimeType: outfitImage.mimeType,
                    },
                },
                {
                    text: 'Analyze the first image of a person and the second image of a piece of clothing. Realistically edit the first image to show the person wearing the clothing from the second image. Ensure the fit and drape look natural. The background of the first image should be preserved. Output only the final edited image without any text.',
                },
            ],
        },
        config: {
            responseModalities: [Modality.IMAGE, Modality.TEXT],
        },
    });

    for (const part of response.candidates[0].content.parts) {
        if (part.inlineData && part.inlineData.data) {
            const { data: base64, mimeType } = part.inlineData;
            return `data:${mimeType};base64,${base64}`;
        }
    }

    // Check for text part for potential error messages from the model
    const textResponse = response.text;
    if (textResponse) {
        throw new Error(`Model returned text instead of an image: ${textResponse}`);
    }

    throw new Error("No image was generated by the model.");
};
